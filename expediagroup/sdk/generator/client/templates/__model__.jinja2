{# Copyright 2022 Expedia, Inc.#}
{##}
{# Licensed under the Apache License, Version 2.0 (the "License");#}
{# you may not use this file except in compliance with the License.#}
{# You may obtain a copy of the License at#}
{##}
{#    http://www.apache.org/licenses/LICENSE-2.0#}
{##}
{# Unless required by applicable law or agreed to in writing, software#}
{# distributed under the License is distributed on an "AS IS" BASIS,#}
{# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#}
{# See the License for the specific language governing permissions and#}
{# limitations under the License.#}
{{ model_imports }}

from collections.abc import Callable
from typing import Union, Any, Literal
from pydantic import Extra, validator, SecretStr, SecretBytes
from pydantic.dataclasses import dataclass
from expediagroup.sdk.core.model.exception.service import ExpediaGroupApiException

SecretStr.__str__ = lambda self: '<-- omitted -->' if self.get_secret_value() else ''

class PydanticModelConfig:
    r"""List of configurations for all SDK pydantic models."""

    JSON_ENCODERS: dict[type, Callable] = {
        SecretStr: lambda v: v.get_secret_value() if v else None,
        SecretBytes: lambda v: v.get_secret_value() if v else None,
    }

    EXTRA: bool = Extra.forbid

    SMART_UNION: bool = True


{% for model in models %}
{% for decorator in model.decorators -%}
{{ decorator }}
{% endfor -%}

class {{ model.class_name }}{% if is_aliased[model.class_name] %}Generic{% endif %}({{ model.base_class }}{% if is_aliased[model.base_class] %}Generic{% endif %},{% if model.base_class != 'Enum' %} smart_union=PydanticModelConfig.SMART_UNION, extra=PydanticModelConfig.EXTRA, json_encoders=PydanticModelConfig.JSON_ENCODERS{% endif %}): {% if comment is defined %}  # {{ model.comment }}{% endif %}
    r"""pydantic model {{ model.class_name }}{%- if model.description %}: {{ model.description }}{%- endif %}
{# comment for new line #}
"""
{% if model.class_name in omitted_log_fields.keys() %}
    {% for field in omitted_log_fields[model.class_name] %}
    @validator("{{ field }}")
    def __{{ field }}_validator(cls, {{ field }}):
        return SecretStr(str({{ field }}))
    {% endfor %}
{% endif %}

{%- if not model.fields %}
    pass
{%- endif %}
{%- for field in model.fields -%}
    {%- if not field.annotated and field.field %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.type_hint }} = {{ field.field.replace('max_items', 'maxItems').replace('min_items', 'minItems') }}
    {%- else %}
    {%- if field.annotated %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.annotated }}
    {%- else %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.type_hint }}
    {%- endif %} = {% if field.default and 'Field' in field.default %}{{ field.default.replace('max_items', 'maxItems').replace('min_items', 'minItems') }}
    {% else %}{{ field.default }}{%- endif -%}
    {%- endif %}
    {%- if field.docstring %}
    """
    {{ field.docstring | indent(4) }}
    """
    {%- endif %}
{%- for method in methods -%}
    {{ model.method }}
{%- endfor -%}
{%- endfor -%}
{% endfor %}

{% for alias in aliases %}
{{ alias.__str__() }}
{% endfor %}

{% for model in models %}
    {% if not is_aliased[model.class_name] and model.base_class != 'Enum' %}
{{ model.class_name }}.update_forward_refs()
    {% endif %}
{% endfor %}

{% for error_model in error_responses_models %}
class ExpediaGroup{{ error_model }}Exception(ExpediaGroupApiException):
    r"""Exception wrapping a {{ error_model }} object."""
    pass
{% endfor %}


{% for error_model in error_responses_models %}
@dataclass
class {{ error_model }}DeserializationContract:
    exception: type = ExpediaGroup{{ error_model }}Exception
    model: type = {{ error_model }}
{% endfor %}
