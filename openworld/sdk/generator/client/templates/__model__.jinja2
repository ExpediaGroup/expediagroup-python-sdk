{# Copyright 2022 Expedia, Inc.#}
{##}
{# Licensed under the Apache License, Version 2.0 (the "License");#}
{# you may not use this file except in compliance with the License.#}
{# You may obtain a copy of the License at#}
{##}
{#    http://www.apache.org/licenses/LICENSE-2.0#}
{##}
{# Unless required by applicable law or agreed to in writing, software#}
{# distributed under the License is distributed on an "AS IS" BASIS,#}
{# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#}
{# See the License for the specific language governing permissions and#}
{# limitations under the License.#}
{{ model_imports }}
from typing import Union, Literal, TypeVar, Generic
from pydantic import Extra
from pydantic.generics import GenericModel


{% for model in models %}
{% for decorator in model.decorators -%}
{{ decorator }}
{% endfor -%}

class {{ model.class_name }}{% if is_aliased[model.class_name] %}Generic{% endif %}({{ model.base_class }}{% if is_aliased[model.base_class] %}Generic{% endif %},{% if model.base_class != 'Enum' %} smart_union=True, extra=Extra.forbid,{% endif %}): {% if comment is defined %}  # {{ model.comment }}{% endif %}

    r"""pydantic model {{ model.class_name }}{%- if model.description %}: {{ model.description }}{%- endif %}
{# comment for new line #}
{%- if model.fields %}Attributes:
    {# comment #}
    {%- for field in model.fields -%}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}({{ field.type_hint }}{% if not field.required %}, optional{% endif %}): {%- if field.docstring %} {{ field.docstring.replace("\n", " ") }}{% elif field.description %}{{ field.description.replace("\n", " ") }}{%- else %} -- {%- endif %}
    {# comment for new line #}
    {%- endfor -%}
{%- endif %}
    """
{%- if not model.fields %}
    pass
{%- endif %}
{%- for field in model.fields -%}
    {%- if not field.annotated and field.field %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.type_hint }} = {{ field.field.replace('max_items', 'maxItems').replace('min_items', 'minItems') }}
    {%- else %}
    {%- if field.annotated %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.annotated }}
    {%- else %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.type_hint }}
    {%- endif %} = {% if field.default and 'Field' in field.default %}{{ field.default.replace('max_items', 'maxItems').replace('min_items', 'minItems') }}
    {% else %}{{ field.default }}{%- endif -%}
    {%- endif %}
    {%- if field.docstring %}
    """
    {{ field.docstring | indent(4) }}
    """
    {%- endif %}
{%- for method in methods -%}
    {{ model.method }}
{%- endfor -%}
{%- endfor -%}
{% endfor %}

{% for alias in aliases %}
{{ alias.__str__() }}
{% endfor %}

{% for model in models %}
    {% if not is_aliased[model.class_name] and model.base_class != 'Enum' %}
{{ model.class_name }}.update_forward_refs()
    {% endif %}
{% endfor %}

