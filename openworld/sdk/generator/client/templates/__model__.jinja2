{# Copyright 2022 Expedia, Inc.#}
{##}
{# Licensed under the Apache License, Version 2.0 (the "License");#}
{# you may not use this file except in compliance with the License.#}
{# You may obtain a copy of the License at#}
{##}
{#    http://www.apache.org/licenses/LICENSE-2.0#}
{##}
{# Unless required by applicable law or agreed to in writing, software#}
{# distributed under the License is distributed on an "AS IS" BASIS,#}
{# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#}
{# See the License for the specific language governing permissions and#}
{# limitations under the License.#}
{{ model_imports }}
from typing import Union, Literal
{% for model in models %}
{% if model.class_name in processed_parent_children_classnames.keys() %}
{# Do not render #}
{% else %}
{% if is_rendered.update([(model.class_name, True)]) %}{% endif %}
{% for decorator in model.decorators -%}
{{ decorator }}
{% endfor -%}
class {{ model.class_name }}({% if model.base_class in processed_parent_children_classnames.keys() %}BaseModel{% else %}{{ model.base_class }}{% endif %}):{% if comment is defined %}  # {{ model.comment }}{% endif %}
    """pydantic model {{ model.class_name }}{%- if model.description %}: {{ model.description }}{%- endif %}
    {# comment for new line #}
    {%- if model.fields %}Attributes:
        {# comment #}
        {%- for field in model.fields -%}
        {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}({{ field.type_hint }}, {{ field.required }}): {%- if field.docstring %} {{ field.docstring }}{% elif field.description %}{{ field.description }}{%- else %} -- {%- endif %}
        {# comment for new line #}
        {%- endfor -%}
    {%- endif %}
    """
{%- if not model.fields %}
    pass
{%- endif %}
{%- for field in model.fields -%}
    {%- if not field.annotated and field.field %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.type_hint }} = {{ field.field.replace('max_items', 'maxItems').replace('min_items', 'minItems') }}
    {%- else %}
    {%- if field.annotated %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.annotated }}
    {%- else %}
    {% if field.name %}{{ field.name }}{% else %}__root__{% endif %}: {{ field.type_hint }}
    {%- endif %}
    {%- if 'Enum' in model.base_class or (not (field.required or (field.represented_default == 'None' and field.strip_default_none)))
            %} = {% if field.default and 'Field' in field.default %}{{ field.default.replace('max_items', 'maxItems').replace('min_items', 'minItems') }}{% else %}{{ field.default }}{% endif %}
    {%- endif -%}
    {%- endif %}
    {%- if field.docstring %}
    """
    {{ field.docstring | indent(4) }}
    """
    {%- endif %}
{%- for method in methods -%}
    {{ model.method }}
{%- endfor -%}
{%- endfor -%}
{% if model.base_class in processed_parent_children_classnames.keys() %}
    {% if all_children_rendered_helper.update([(model.base_class, True)]) %}{% endif %}
    {% for child_classname in processed_parent_children_classnames[model.base_class] %}
        {% if all_children_rendered_helper.update([(model.base_class, all_children_rendered_helper[model.base_class] and is_rendered[child_classname])]) %}{% endif %}
    {% endfor %}
    {% if all_children_rendered_helper[model.base_class] %}
{{ model.base_class }} = Union[{% for child_classname in processed_parent_children_classnames[model.base_class] %}{{ child_classname }},{% endfor %}]
    {% endif %}
{% endif %}
{% endif %}
{% endfor %}
{% for model in models %}
    {% if not (model.class_name in processed_parent_children_classnames.keys() or model.base_class == 'Enum') %}
{{ model.class_name }}.update_forward_refs()
    {% endif %}
{% endfor %}
