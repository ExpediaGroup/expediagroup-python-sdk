import json
import platform
import pydantic.schema
from .model import *
from typing import *
from openworld.sdk.core.client.api import ApiClient
from openworld.sdk.core.configuration.client_config import ClientConfig
from furl import furl
from uuid import UUID, uuid4
{{ imports }}
class {{ classname }}:
    def __init__(self, client_config: ClientConfig):
        """{{ api }} Client.

        :param client_config: Client configuration holder.
        """
        python_version = platform.python_version()
        os_name, os_version = platform.platform().split('-')[:2]
        sdk_metadata = f'open-world-sdk-python-{{ namespace }}/{{ version }}'

        self.__api_client = ApiClient(client_config)
        self.__user_agent = f'{sdk_metadata} (Python {python_version}; {os_name} {os_version})'

    {% for operation in operations %}
    def {{operation.function_name}}(self, {{operation.snake_case_arguments}}) -> {{operation.return_type}}:
        headers = {
        {% for arguemnt in operation.snake_case_arguments_list %}
            {% if arguemnt.in_.value == 'header' %}
            '{{ arguemnt.alias }}': json.loads(json.dumps({{ arguemnt.name.strip() }})),
            {% endif %}
        {% endfor %}
        }

        query = {key: value for key, value in {
        {% for arguemnt in operation.snake_case_arguments_list %}
            {% if arguemnt.in_.value == 'query' %}
            '{{ arguemnt.alias }}': json.loads(json.dumps({{ arguemnt.name.strip() }}, default=pydantic.schema.pydantic_encoder)),
            {% endif %}
            {% endfor %}
        }.items() if value}

        request_url = furl(self.__api_client.endpoint)
        request_url /= f'{{operation.path}}'
        request_url.query.set(query)
        request_url.path.normalize()

        return self.__api_client.call(
            headers=headers,
            method='{{ operation.method }}',
            body={% if 'body' in operation.snake_case_arguments %}body{% else %}None{% endif %},
            response_models={{ operation.return_type.removeprefix('Union')}},
            url=request_url
        )
{% endfor %}
